// Bump.c
// Runs on MSP432
// Provide low-level functions that interface bump switches the robot.
// Daniel Valvano and Jonathan Valvano
// July 2, 2017

/* This example accompanies the books
   "Embedded Systems: Introduction to the MSP432 Microcontroller",
       ISBN: 978-1512185676, Jonathan Valvano, copyright (c) 2017
   "Embedded Systems: Real-Time Interfacing to the MSP432 Microcontroller",
       ISBN: 978-1514676585, Jonathan Valvano, copyright (c) 2017
   "Embedded Systems: Real-Time Operating Systems for ARM Cortex-M Microcontrollers",
       ISBN: 978-1466468863, , Jonathan Valvano, copyright (c) 2017
 For more information about my classes, my research, and my books, see
 http://users.ece.utexas.edu/~valvano/

Simplified BSD License (FreeBSD License)
Copyright (c) 2017, Jonathan Valvano, All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied, of the FreeBSD Project.
*/

// Negative logic bump sensors
// P4.7 Bump5, left side of robot
// P4.6 Bump4
// P4.5 Bump3
// P4.3 Bump2
// P4.2 Bump1
// P4.0 Bump0, right side of robot

#include <stdint.h>
#include "msp.h"
#include "motor.h"
#include "PWM.h"


// Initialize Bump sensors
// Make six Port 4 pins inputs
// Activate interface pullup
// pins 7,6,5,3,2,0
void (*Port4Task)(uint8_t);
void PORT4_IRQHandler(void) {
    // Step 1: Clear interrupt flags to prevent re-triggering
    P4->IFG &= 0x12;  // Clear flags for Bump0, Bump1, Bump2, Bump3, Bump4, Bump5

    //-----------------------------------------PORTION TO BE UNCOMMENTED FOR BUMP_AVOIDANCE--------------------------------------------------------
    // Step 2: Read the bump switch states
    uint8_t bumpStatus = Bump_Read();  // Get the current state of the bump switches

    // Speed value for normal movement (scaled to 1500 for normal speed)
    const uint32_t normalSpeed = 1500;  // Normal speed (set to 1500 as per your request)

    // Step 3: React to which bump switches are pressed
    if (bumpStatus == 0x3F) {
        // No bump switches pressed
        Motor_Forward(normalSpeed, normalSpeed);  // Move forward if no bumps are detected
    }
    else {
        // Step 4: Reverse the robot for a short duration
        Motor_Backward(normalSpeed, normalSpeed);  // Reverse at normal speed (1500)
        Clock_Delay1ms(500);                      // Delay to allow for a small reverse (500 ms)
        Motor_Stop();                             // Stop the robot before turning

        // Step 5: Turn the robot to avoid the obstacle
        if (!((bumpStatus & 0x01) && (bumpStatus & 0x02)))  {
            // Bumps on the right side (Bump0, Bump1)
            Motor_Left(normalSpeed, normalSpeed);  // Turn left to avoid the right-side obstacles
            Clock_Delay1ms(750);                  // Turn for 1000 ms (adjust as needed)
        }
        else if (!((bumpStatus & 0x10) && (bumpStatus & 0x20))) {
            // Bumps on the left side (Bump4, Bump5)
            Motor_Right(normalSpeed, normalSpeed);  // Turn right to avoid the left-side obstacles
            Clock_Delay1ms(750);                   // Turn for 1000 ms (adjust as needed)
        }
        else if (!((bumpStatus & 0x04) && (bumpStatus & 0x08))) {
            // Center collision (Bump2, Bump3 pressed)
            Motor_Left(normalSpeed, normalSpeed);  // Turn left sharply to avoid a front collision
            Clock_Delay1ms(1500);                  // Turn for a longer duration if it's a center collision
        }
        else {
            // If no recognized pattern, just move forward again
            Motor_Forward(normalSpeed, normalSpeed);
        }
    }

}

void Bump_Init(void (*task)(uint8_t)){
    // write this as part of Lab 3
    // Initialise GPIO related registers.
    // Registers: SEL0, SEL1, DIR, REN, OUT.
    Port4Task = task;
    P4->SEL0 &= 0x12;
    P4->SEL1 &= 0x12;
    P4->DIR &= 0x12;
    P4->REN |= 0xED;
    P4->OUT |= 0xED;
    P4->IE |= 0xED;
    P4->IES |= 0xED;
    P4->IFG &= 0x12;
    NVIC->ISER[1] = 0x40;
    NVIC->IP[9] = (NVIC->IP[9]&0xFF00FFFF)|0x40000000; // priority 2
}
// Read current state of 6 switches
// Returns a 6-bit positive logic result (0 to 63)
// bit 5 Bump5
// bit 4 Bump4
// bit 3 Bump3
// bit 2 Bump2
// bit 1 Bump1
// bit 0 Bump0
uint8_t Bump_Read(void){
    // write this as part of Lab 3
    // Pack the 6 valid bits in the value read from the input data
    // register to occupy 6 lower order bits of the result variable.
    uint8_t result = 0;
    uint8_t inter;
    uint32_t bitval = 0;
    inter = P4->IN;
    uint32_t position = 0;
    uint32_t i=0;
    for (i=0; i<8; i++){
        if (i!=1 && i!=4){
            bitval = inter & 0x01;
            if (bitval == 1){
                result |= (1 << position);
            }
            else{
                result &= ~(1 << position);
            }
            position = position +1;
        }
        inter = inter >> 1;
    }
    result &= ~(1 << 6);
    result &= ~(1 << 7);
    return (result);
}

